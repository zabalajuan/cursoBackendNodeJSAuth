Clase 3 - Instalación proyecto
  Lo primero es clonar el repositorio
    configurar mi repositorio github

  Instalar las dependencias
    npm i
  Creamos nuestras propias variables de entorno
    .env
      PORT
      DATABASE_URL
  Lo siguiente es crear la carpeta para el volumen, la carpeta local donde estara la base de datos
    postgres_data

  ahora si levantamos el servicio/docker
    docker-compose up -d postgres
    docker-compose up -d pgadmin

  Una vez levantados los servicios, podemos validar su estado con
    docker-compose up -d ps

    Entramos al navegador
      localhost:5050
    nos loggeamos
    Es necesario conectar la base de datos
      Object > create > Server group
      Add new server
        es necesario obtener la IP de nuestro contenedor
          primero busco el id del contenedor
            docker ps
              identifico el id del contenedor y lo inspeccionamos
                docker inspect {id_del contenedor}
                  identificamos la IP en la que corre

                  ingresamos los datos en la interfaz grafica para que la conexion quede lista

  Para generar los schemas, es necesario correr la primera migration
    npm run migrations:run


  Una vez hechas la smigraciones, vamos a correr en desarrollo y probar endpoints
    npm run dev

  En insomnia podemos tener varios ambientes para probar los endpoints
    _API_URL

Clase 4 - Middleware de verificación
  creamos el archivo auth.handler.js con el middleware de autorizacion
    lo probaremos con el endpoint 'nuevaRuta'
  
  Como la API_KEY no debería quedar por ahí en el código, la paasaremos como una variable de ambiente, modificando
    .env 
      config.js

CLase 5 - Hashing de contraseñas con bcryptjs
  es necesario instalar la libreria bcrypt
    npm i bcrypt
      creamos el archivo pass-hash.js
      creamos el archivo pass-verify.js
      
Clase 6 - Implementando hashing para usuarios
  modificacmos el servicio de usuarios y customers para hacer el hash de la contraseñas

Clase 7 - Implementando Login con Passport.js
  Passport.js da versatilidad para tener diferentes estrategias de login, como github, facebook, etc
    Passport local - es la primera estrategia que usaremos
      npm i passport passport-local

      vamos a generar la estructura en la carpeta utils
        en el index.js es donde vamos a definir las estrategias que vamos a usar para login
      Modificamos nuestro servicio de usuario para buscar por email

    Una vez implementada la logica de la estrategia d elogin, es necesario llevarla al routing

    Importante modificar el index.js general para que use passport y la estrategia local

Clase 8-9 - Jason web tokens - Firmar y verificar
  Siguiendo las recomendacions de la documentacion de JWT, usaremos la libreria para node
    npm install jsonwebtoken
      un token esta compuesto por tres partes:
        header.payload.firma
      En el payload no debe ir información sensible, porque esta informacion es publica

Clase 10 - Generar JWT en el servicio
  Una vez hemos verificado al usuario, se ha loggeado correctamente, podemos generarle el token
  Modificaremos el auth.router.js
  El secreto lo guardamos como una variable de ambiente en el .env
    y se ajusta el respectivo archivo config con las variables de ambiente

    Para generar los secretos, hay una pagina Keygen.io

Clase 11 - Protección de rutas
  Para proteger las rutas, tenemos que usar la estrategia jwt de passport
    npm install passport-jwt
    creamos la estrategia en el utils => jwt.strategy.js
      y la agregamos al index.js de estrategias
        ya con esto podríamos porteger los endpoints
          Haremos el ejemplo con las categorias por ejemplo
        
        Para probar en insomina, enviamos la autenticacion como bearertoken


Clase 12 - Control de roles
  Vamos a modificar nuestro authentification handler
    creamos un validador/middleware que podemos agregar a los endpoints para validar si el 
    usuario tiene los permisos o no para X operación, como crear una categoria

    Para tener un validador de roles, vamos a usar la caracteristica de javascript, 
      Closures

  Hay una libreria AccessControl para d eforma explicita manejar permisos de roles